// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: teleport/kubeprovision/v1/kubeprovision_service.proto

package kubeprovisionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	KubeProvisionService_CreateKubeProvision_FullMethodName     = "/teleport.kubeprovision.v1.KubeProvisionService/CreateKubeProvision"
	KubeProvisionService_GetKubeProvision_FullMethodName        = "/teleport.kubeprovision.v1.KubeProvisionService/GetKubeProvision"
	KubeProvisionService_ListKubeProvisions_FullMethodName      = "/teleport.kubeprovision.v1.KubeProvisionService/ListKubeProvisions"
	KubeProvisionService_UpdateKubeProvision_FullMethodName     = "/teleport.kubeprovision.v1.KubeProvisionService/UpdateKubeProvision"
	KubeProvisionService_UpsertKubeProvision_FullMethodName     = "/teleport.kubeprovision.v1.KubeProvisionService/UpsertKubeProvision"
	KubeProvisionService_DeleteKubeProvision_FullMethodName     = "/teleport.kubeprovision.v1.KubeProvisionService/DeleteKubeProvision"
	KubeProvisionService_DeleteAllKubeProvisions_FullMethodName = "/teleport.kubeprovision.v1.KubeProvisionService/DeleteAllKubeProvisions"
)

// KubeProvisionServiceClient is the client API for KubeProvisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KubeProvisionService is a service that provides methods to manage KubeProvisions.
type KubeProvisionServiceClient interface {
	// CreateKubeProvision creates a new KubeProvision.
	CreateKubeProvision(ctx context.Context, in *CreateKubeProvisionRequest, opts ...grpc.CallOption) (*KubeProvision, error)
	// GetKubeProvision gets a KubeProvision by name.
	GetKubeProvision(ctx context.Context, in *GetKubeProvisionRequest, opts ...grpc.CallOption) (*KubeProvision, error)
	// ListKubeProvisions returns a list of KubeProvisions. It supports pagination.
	ListKubeProvisions(ctx context.Context, in *ListKubeProvisionsRequest, opts ...grpc.CallOption) (*ListKubeProvisionsResponse, error)
	// UpdateKubeProvision updates an existing KubeProvision.
	UpdateKubeProvision(ctx context.Context, in *UpdateKubeProvisionRequest, opts ...grpc.CallOption) (*KubeProvision, error)
	// UpsertKubeProvision upserts a KubeProvision.
	UpsertKubeProvision(ctx context.Context, in *UpsertKubeProvisionRequest, opts ...grpc.CallOption) (*KubeProvision, error)
	// DeleteKubeProvision deletes a KubeProvision.
	DeleteKubeProvision(ctx context.Context, in *DeleteKubeProvisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllKubeProvisions removes all DiscoveryConfigs.
	DeleteAllKubeProvisions(ctx context.Context, in *DeleteAllKubeProvisionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type kubeProvisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeProvisionServiceClient(cc grpc.ClientConnInterface) KubeProvisionServiceClient {
	return &kubeProvisionServiceClient{cc}
}

func (c *kubeProvisionServiceClient) CreateKubeProvision(ctx context.Context, in *CreateKubeProvisionRequest, opts ...grpc.CallOption) (*KubeProvision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KubeProvision)
	err := c.cc.Invoke(ctx, KubeProvisionService_CreateKubeProvision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeProvisionServiceClient) GetKubeProvision(ctx context.Context, in *GetKubeProvisionRequest, opts ...grpc.CallOption) (*KubeProvision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KubeProvision)
	err := c.cc.Invoke(ctx, KubeProvisionService_GetKubeProvision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeProvisionServiceClient) ListKubeProvisions(ctx context.Context, in *ListKubeProvisionsRequest, opts ...grpc.CallOption) (*ListKubeProvisionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKubeProvisionsResponse)
	err := c.cc.Invoke(ctx, KubeProvisionService_ListKubeProvisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeProvisionServiceClient) UpdateKubeProvision(ctx context.Context, in *UpdateKubeProvisionRequest, opts ...grpc.CallOption) (*KubeProvision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KubeProvision)
	err := c.cc.Invoke(ctx, KubeProvisionService_UpdateKubeProvision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeProvisionServiceClient) UpsertKubeProvision(ctx context.Context, in *UpsertKubeProvisionRequest, opts ...grpc.CallOption) (*KubeProvision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KubeProvision)
	err := c.cc.Invoke(ctx, KubeProvisionService_UpsertKubeProvision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeProvisionServiceClient) DeleteKubeProvision(ctx context.Context, in *DeleteKubeProvisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KubeProvisionService_DeleteKubeProvision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeProvisionServiceClient) DeleteAllKubeProvisions(ctx context.Context, in *DeleteAllKubeProvisionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KubeProvisionService_DeleteAllKubeProvisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeProvisionServiceServer is the server API for KubeProvisionService service.
// All implementations must embed UnimplementedKubeProvisionServiceServer
// for forward compatibility
//
// KubeProvisionService is a service that provides methods to manage KubeProvisions.
type KubeProvisionServiceServer interface {
	// CreateKubeProvision creates a new KubeProvision.
	CreateKubeProvision(context.Context, *CreateKubeProvisionRequest) (*KubeProvision, error)
	// GetKubeProvision gets a KubeProvision by name.
	GetKubeProvision(context.Context, *GetKubeProvisionRequest) (*KubeProvision, error)
	// ListKubeProvisions returns a list of KubeProvisions. It supports pagination.
	ListKubeProvisions(context.Context, *ListKubeProvisionsRequest) (*ListKubeProvisionsResponse, error)
	// UpdateKubeProvision updates an existing KubeProvision.
	UpdateKubeProvision(context.Context, *UpdateKubeProvisionRequest) (*KubeProvision, error)
	// UpsertKubeProvision upserts a KubeProvision.
	UpsertKubeProvision(context.Context, *UpsertKubeProvisionRequest) (*KubeProvision, error)
	// DeleteKubeProvision deletes a KubeProvision.
	DeleteKubeProvision(context.Context, *DeleteKubeProvisionRequest) (*emptypb.Empty, error)
	// DeleteAllKubeProvisions removes all DiscoveryConfigs.
	DeleteAllKubeProvisions(context.Context, *DeleteAllKubeProvisionsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedKubeProvisionServiceServer()
}

// UnimplementedKubeProvisionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKubeProvisionServiceServer struct {
}

func (UnimplementedKubeProvisionServiceServer) CreateKubeProvision(context.Context, *CreateKubeProvisionRequest) (*KubeProvision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubeProvision not implemented")
}
func (UnimplementedKubeProvisionServiceServer) GetKubeProvision(context.Context, *GetKubeProvisionRequest) (*KubeProvision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeProvision not implemented")
}
func (UnimplementedKubeProvisionServiceServer) ListKubeProvisions(context.Context, *ListKubeProvisionsRequest) (*ListKubeProvisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKubeProvisions not implemented")
}
func (UnimplementedKubeProvisionServiceServer) UpdateKubeProvision(context.Context, *UpdateKubeProvisionRequest) (*KubeProvision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKubeProvision not implemented")
}
func (UnimplementedKubeProvisionServiceServer) UpsertKubeProvision(context.Context, *UpsertKubeProvisionRequest) (*KubeProvision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertKubeProvision not implemented")
}
func (UnimplementedKubeProvisionServiceServer) DeleteKubeProvision(context.Context, *DeleteKubeProvisionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubeProvision not implemented")
}
func (UnimplementedKubeProvisionServiceServer) DeleteAllKubeProvisions(context.Context, *DeleteAllKubeProvisionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllKubeProvisions not implemented")
}
func (UnimplementedKubeProvisionServiceServer) mustEmbedUnimplementedKubeProvisionServiceServer() {}

// UnsafeKubeProvisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeProvisionServiceServer will
// result in compilation errors.
type UnsafeKubeProvisionServiceServer interface {
	mustEmbedUnimplementedKubeProvisionServiceServer()
}

func RegisterKubeProvisionServiceServer(s grpc.ServiceRegistrar, srv KubeProvisionServiceServer) {
	s.RegisterService(&KubeProvisionService_ServiceDesc, srv)
}

func _KubeProvisionService_CreateKubeProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKubeProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeProvisionServiceServer).CreateKubeProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeProvisionService_CreateKubeProvision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeProvisionServiceServer).CreateKubeProvision(ctx, req.(*CreateKubeProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeProvisionService_GetKubeProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeProvisionServiceServer).GetKubeProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeProvisionService_GetKubeProvision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeProvisionServiceServer).GetKubeProvision(ctx, req.(*GetKubeProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeProvisionService_ListKubeProvisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKubeProvisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeProvisionServiceServer).ListKubeProvisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeProvisionService_ListKubeProvisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeProvisionServiceServer).ListKubeProvisions(ctx, req.(*ListKubeProvisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeProvisionService_UpdateKubeProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubeProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeProvisionServiceServer).UpdateKubeProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeProvisionService_UpdateKubeProvision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeProvisionServiceServer).UpdateKubeProvision(ctx, req.(*UpdateKubeProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeProvisionService_UpsertKubeProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertKubeProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeProvisionServiceServer).UpsertKubeProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeProvisionService_UpsertKubeProvision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeProvisionServiceServer).UpsertKubeProvision(ctx, req.(*UpsertKubeProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeProvisionService_DeleteKubeProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKubeProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeProvisionServiceServer).DeleteKubeProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeProvisionService_DeleteKubeProvision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeProvisionServiceServer).DeleteKubeProvision(ctx, req.(*DeleteKubeProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeProvisionService_DeleteAllKubeProvisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllKubeProvisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeProvisionServiceServer).DeleteAllKubeProvisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeProvisionService_DeleteAllKubeProvisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeProvisionServiceServer).DeleteAllKubeProvisions(ctx, req.(*DeleteAllKubeProvisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeProvisionService_ServiceDesc is the grpc.ServiceDesc for KubeProvisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeProvisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.kubeprovision.v1.KubeProvisionService",
	HandlerType: (*KubeProvisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKubeProvision",
			Handler:    _KubeProvisionService_CreateKubeProvision_Handler,
		},
		{
			MethodName: "GetKubeProvision",
			Handler:    _KubeProvisionService_GetKubeProvision_Handler,
		},
		{
			MethodName: "ListKubeProvisions",
			Handler:    _KubeProvisionService_ListKubeProvisions_Handler,
		},
		{
			MethodName: "UpdateKubeProvision",
			Handler:    _KubeProvisionService_UpdateKubeProvision_Handler,
		},
		{
			MethodName: "UpsertKubeProvision",
			Handler:    _KubeProvisionService_UpsertKubeProvision_Handler,
		},
		{
			MethodName: "DeleteKubeProvision",
			Handler:    _KubeProvisionService_DeleteKubeProvision_Handler,
		},
		{
			MethodName: "DeleteAllKubeProvisions",
			Handler:    _KubeProvisionService_DeleteAllKubeProvisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/kubeprovision/v1/kubeprovision_service.proto",
}
